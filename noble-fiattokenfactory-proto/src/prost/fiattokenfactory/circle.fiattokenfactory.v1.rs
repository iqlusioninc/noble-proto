// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blacklisted {
    #[prost(bytes = "vec", tag = "1")]
    pub address_bz: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Blacklisted {
    const NAME: &'static str = "Blacklisted";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Blacklisted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Blacklisted".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blacklister {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for Blacklister {
    const NAME: &'static str = "Blacklister";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Blacklister".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Blacklister".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MasterMinter {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MasterMinter {
    const NAME: &'static str = "MasterMinter";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MasterMinter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MasterMinter".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MinterController {
    #[prost(string, tag = "1")]
    pub minter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub controller: ::prost::alloc::string::String,
}
impl ::prost::Name for MinterController {
    const NAME: &'static str = "MinterController";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MinterController".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MinterController".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Minters {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub allowance: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for Minters {
    const NAME: &'static str = "Minters";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Minters".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Minters".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MintingDenom {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for MintingDenom {
    const NAME: &'static str = "MintingDenom";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MintingDenom".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MintingDenom".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Owner {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for Owner {
    const NAME: &'static str = "Owner";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Owner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Owner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Paused {
    #[prost(bool, tag = "1")]
    pub paused: bool,
}
impl ::prost::Name for Paused {
    const NAME: &'static str = "Paused";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Paused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Paused".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pauser {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for Pauser {
    const NAME: &'static str = "Pauser";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.Pauser".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.Pauser".into()
    }
}
/// GenesisState defines the fiattokenfactory module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "2")]
    pub blacklisted_list: ::prost::alloc::vec::Vec<Blacklisted>,
    #[prost(message, optional, tag = "3")]
    pub paused: ::core::option::Option<Paused>,
    #[prost(message, optional, tag = "4")]
    pub master_minter: ::core::option::Option<MasterMinter>,
    #[prost(message, repeated, tag = "5")]
    pub minters_list: ::prost::alloc::vec::Vec<Minters>,
    #[prost(message, optional, tag = "6")]
    pub pauser: ::core::option::Option<Pauser>,
    #[prost(message, optional, tag = "7")]
    pub blacklister: ::core::option::Option<Blacklister>,
    #[prost(message, optional, tag = "8")]
    pub owner: ::core::option::Option<Owner>,
    #[prost(message, repeated, tag = "9")]
    pub minter_controller_list: ::prost::alloc::vec::Vec<MinterController>,
    #[prost(message, optional, tag = "10")]
    pub minting_denom: ::core::option::Option<MintingDenom>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.GenesisState".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetBlacklistedRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetBlacklistedRequest {
    const NAME: &'static str = "QueryGetBlacklistedRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetBlacklistedRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetBlacklistedRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetBlacklistedResponse {
    #[prost(message, optional, tag = "1")]
    pub blacklisted: ::core::option::Option<Blacklisted>,
}
impl ::prost::Name for QueryGetBlacklistedResponse {
    const NAME: &'static str = "QueryGetBlacklistedResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetBlacklistedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetBlacklistedResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllBlacklistedRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryAllBlacklistedRequest {
    const NAME: &'static str = "QueryAllBlacklistedRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllBlacklistedRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllBlacklistedRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllBlacklistedResponse {
    #[prost(message, repeated, tag = "1")]
    pub blacklisted: ::prost::alloc::vec::Vec<Blacklisted>,
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryAllBlacklistedResponse {
    const NAME: &'static str = "QueryAllBlacklistedResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllBlacklistedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllBlacklistedResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetPausedRequest {}
impl ::prost::Name for QueryGetPausedRequest {
    const NAME: &'static str = "QueryGetPausedRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetPausedRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetPausedRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetPausedResponse {
    #[prost(message, optional, tag = "1")]
    pub paused: ::core::option::Option<Paused>,
}
impl ::prost::Name for QueryGetPausedResponse {
    const NAME: &'static str = "QueryGetPausedResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetPausedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetPausedResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetMasterMinterRequest {}
impl ::prost::Name for QueryGetMasterMinterRequest {
    const NAME: &'static str = "QueryGetMasterMinterRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMasterMinterRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMasterMinterRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMasterMinterResponse {
    #[prost(message, optional, tag = "1")]
    pub master_minter: ::core::option::Option<MasterMinter>,
}
impl ::prost::Name for QueryGetMasterMinterResponse {
    const NAME: &'static str = "QueryGetMasterMinterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMasterMinterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMasterMinterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMintersRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetMintersRequest {
    const NAME: &'static str = "QueryGetMintersRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMintersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMintersRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMintersResponse {
    #[prost(message, optional, tag = "1")]
    pub minters: ::core::option::Option<Minters>,
}
impl ::prost::Name for QueryGetMintersResponse {
    const NAME: &'static str = "QueryGetMintersResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMintersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMintersResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllMintersRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryAllMintersRequest {
    const NAME: &'static str = "QueryAllMintersRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllMintersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllMintersRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllMintersResponse {
    #[prost(message, repeated, tag = "1")]
    pub minters: ::prost::alloc::vec::Vec<Minters>,
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryAllMintersResponse {
    const NAME: &'static str = "QueryAllMintersResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllMintersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllMintersResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetPauserRequest {}
impl ::prost::Name for QueryGetPauserRequest {
    const NAME: &'static str = "QueryGetPauserRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetPauserRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetPauserRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetPauserResponse {
    #[prost(message, optional, tag = "1")]
    pub pauser: ::core::option::Option<Pauser>,
}
impl ::prost::Name for QueryGetPauserResponse {
    const NAME: &'static str = "QueryGetPauserResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetPauserResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetPauserResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetBlacklisterRequest {}
impl ::prost::Name for QueryGetBlacklisterRequest {
    const NAME: &'static str = "QueryGetBlacklisterRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetBlacklisterRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetBlacklisterRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetBlacklisterResponse {
    #[prost(message, optional, tag = "1")]
    pub blacklister: ::core::option::Option<Blacklister>,
}
impl ::prost::Name for QueryGetBlacklisterResponse {
    const NAME: &'static str = "QueryGetBlacklisterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetBlacklisterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetBlacklisterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetOwnerRequest {}
impl ::prost::Name for QueryGetOwnerRequest {
    const NAME: &'static str = "QueryGetOwnerRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetOwnerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetOwnerRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetOwnerResponse {
    #[prost(message, optional, tag = "1")]
    pub owner: ::core::option::Option<Owner>,
}
impl ::prost::Name for QueryGetOwnerResponse {
    const NAME: &'static str = "QueryGetOwnerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMinterControllerRequest {
    #[prost(string, tag = "1")]
    pub controller_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetMinterControllerRequest {
    const NAME: &'static str = "QueryGetMinterControllerRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMinterControllerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMinterControllerRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMinterControllerResponse {
    #[prost(message, optional, tag = "1")]
    pub minter_controller: ::core::option::Option<MinterController>,
}
impl ::prost::Name for QueryGetMinterControllerResponse {
    const NAME: &'static str = "QueryGetMinterControllerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMinterControllerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMinterControllerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllMinterControllerRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryAllMinterControllerRequest {
    const NAME: &'static str = "QueryAllMinterControllerRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllMinterControllerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllMinterControllerRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllMinterControllerResponse {
    #[prost(message, repeated, tag = "1")]
    pub minter_controller: ::prost::alloc::vec::Vec<MinterController>,
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryAllMinterControllerResponse {
    const NAME: &'static str = "QueryAllMinterControllerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryAllMinterControllerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryAllMinterControllerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryGetMintingDenomRequest {}
impl ::prost::Name for QueryGetMintingDenomRequest {
    const NAME: &'static str = "QueryGetMintingDenomRequest";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMintingDenomRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMintingDenomRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetMintingDenomResponse {
    #[prost(message, optional, tag = "1")]
    pub minting_denom: ::core::option::Option<MintingDenom>,
}
impl ::prost::Name for QueryGetMintingDenomResponse {
    const NAME: &'static str = "QueryGetMintingDenomResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.QueryGetMintingDenomResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.QueryGetMintingDenomResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateMasterMinter {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUpdateMasterMinter {
    const NAME: &'static str = "MsgUpdateMasterMinter";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateMasterMinter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateMasterMinter".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateMasterMinterResponse {}
impl ::prost::Name for MsgUpdateMasterMinterResponse {
    const NAME: &'static str = "MsgUpdateMasterMinterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateMasterMinterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateMasterMinterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdatePauser {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUpdatePauser {
    const NAME: &'static str = "MsgUpdatePauser";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdatePauser".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdatePauser".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdatePauserResponse {}
impl ::prost::Name for MsgUpdatePauserResponse {
    const NAME: &'static str = "MsgUpdatePauserResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdatePauserResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdatePauserResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateBlacklister {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUpdateBlacklister {
    const NAME: &'static str = "MsgUpdateBlacklister";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateBlacklister".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateBlacklister".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateBlacklisterResponse {}
impl ::prost::Name for MsgUpdateBlacklisterResponse {
    const NAME: &'static str = "MsgUpdateBlacklisterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateBlacklisterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateBlacklisterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateOwner {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUpdateOwner {
    const NAME: &'static str = "MsgUpdateOwner";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateOwner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateOwnerResponse {}
impl ::prost::Name for MsgUpdateOwnerResponse {
    const NAME: &'static str = "MsgUpdateOwnerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUpdateOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUpdateOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAcceptOwner {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgAcceptOwner {
    const NAME: &'static str = "MsgAcceptOwner";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgAcceptOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgAcceptOwner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgAcceptOwnerResponse {}
impl ::prost::Name for MsgAcceptOwnerResponse {
    const NAME: &'static str = "MsgAcceptOwnerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgAcceptOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgAcceptOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgConfigureMinter {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub allowance: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgConfigureMinter {
    const NAME: &'static str = "MsgConfigureMinter";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgConfigureMinter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgConfigureMinter".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgConfigureMinterResponse {}
impl ::prost::Name for MsgConfigureMinterResponse {
    const NAME: &'static str = "MsgConfigureMinterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgConfigureMinterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgConfigureMinterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRemoveMinter {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgRemoveMinter {
    const NAME: &'static str = "MsgRemoveMinter";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgRemoveMinter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgRemoveMinter".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRemoveMinterResponse {}
impl ::prost::Name for MsgRemoveMinterResponse {
    const NAME: &'static str = "MsgRemoveMinterResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgRemoveMinterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgRemoveMinterResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgMint {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgMint {
    const NAME: &'static str = "MsgMint";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgMint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgMint".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgMintResponse {}
impl ::prost::Name for MsgMintResponse {
    const NAME: &'static str = "MsgMintResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgMintResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgMintResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBurn {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub amount: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgBurn {
    const NAME: &'static str = "MsgBurn";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgBurn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgBurn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgBurnResponse {}
impl ::prost::Name for MsgBurnResponse {
    const NAME: &'static str = "MsgBurnResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgBurnResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgBurnResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBlacklist {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgBlacklist {
    const NAME: &'static str = "MsgBlacklist";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgBlacklist".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgBlacklist".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgBlacklistResponse {}
impl ::prost::Name for MsgBlacklistResponse {
    const NAME: &'static str = "MsgBlacklistResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgBlacklistResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgBlacklistResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnblacklist {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUnblacklist {
    const NAME: &'static str = "MsgUnblacklist";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUnblacklist".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUnblacklist".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUnblacklistResponse {}
impl ::prost::Name for MsgUnblacklistResponse {
    const NAME: &'static str = "MsgUnblacklistResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUnblacklistResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUnblacklistResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgPause {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgPause {
    const NAME: &'static str = "MsgPause";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgPause".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgPause".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgPauseResponse {}
impl ::prost::Name for MsgPauseResponse {
    const NAME: &'static str = "MsgPauseResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgPauseResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgPauseResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnpause {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUnpause {
    const NAME: &'static str = "MsgUnpause";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUnpause".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUnpause".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUnpauseResponse {}
impl ::prost::Name for MsgUnpauseResponse {
    const NAME: &'static str = "MsgUnpauseResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgUnpauseResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgUnpauseResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgConfigureMinterController {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub controller: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub minter: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgConfigureMinterController {
    const NAME: &'static str = "MsgConfigureMinterController";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgConfigureMinterController".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgConfigureMinterController".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgConfigureMinterControllerResponse {}
impl ::prost::Name for MsgConfigureMinterControllerResponse {
    const NAME: &'static str = "MsgConfigureMinterControllerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgConfigureMinterControllerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgConfigureMinterControllerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRemoveMinterController {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub controller: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgRemoveMinterController {
    const NAME: &'static str = "MsgRemoveMinterController";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgRemoveMinterController".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgRemoveMinterController".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRemoveMinterControllerResponse {}
impl ::prost::Name for MsgRemoveMinterControllerResponse {
    const NAME: &'static str = "MsgRemoveMinterControllerResponse";
    const PACKAGE: &'static str = "circle.fiattokenfactory.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "circle.fiattokenfactory.v1.MsgRemoveMinterControllerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/circle.fiattokenfactory.v1.MsgRemoveMinterControllerResponse".into()
    }
}
include!("circle.fiattokenfactory.v1.serde.rs");
include!("circle.fiattokenfactory.v1.tonic.rs");
// @@protoc_insertion_point(module)
