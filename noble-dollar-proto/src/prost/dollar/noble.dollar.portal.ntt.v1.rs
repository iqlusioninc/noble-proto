// @generated
// This file is @generated by prost-build.
/// ManagerMessage is the type that stores information about a manager message.
///
/// The wire format of the message is as follows:
///    - id - 32 bytes
///    - sender - 32 bytes
///    - payloadLength - 2 bytes
///    - payload - `payloadLength` bytes
///
/// <https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L41-L56>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManagerMessage {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for ManagerMessage {
    const NAME: &'static str = "ManagerMessage";
    const PACKAGE: &'static str = "noble.dollar.portal.ntt.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "noble.dollar.portal.ntt.v1.ManagerMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/noble.dollar.portal.ntt.v1.ManagerMessage".into()
    }
}
/// NativeTokenTransfer is the type that stores information about a native token transfer.
///
/// The wire format of the payload is as follows:
///    - NativeTokenTransferPrefix - 4 bytes
///    - numDecimals - 1 byte
///    - amount - 8 bytes
///    - sourceToken - 32 bytes
///    - to - 32 bytes
///    - toChain - 2 bytes
///    - additionalPayloadLength - 2 bytes, optional
///    - additionalPayload - `additionalPayloadLength` bytes
///
/// <https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L97-L119>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NativeTokenTransfer {
    #[prost(uint64, tag = "1")]
    pub amount: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub source_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub to_chain: u32,
    #[prost(bytes = "vec", tag = "5")]
    pub additional_payload: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for NativeTokenTransfer {
    const NAME: &'static str = "NativeTokenTransfer";
    const PACKAGE: &'static str = "noble.dollar.portal.ntt.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "noble.dollar.portal.ntt.v1.NativeTokenTransfer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/noble.dollar.portal.ntt.v1.NativeTokenTransfer".into()
    }
}
/// TransceiverMessage is the type that stores information about a transceiver message.
///
/// The wire format of the message is as follows:
///    - prefix - 4 bytes
///    - sourceManagerAddress - 32 bytes
///    - recipientManagerAddress - 32 bytes
///    - managerPayloadLength - 2 bytes
///    - managerPayload - `managerPayloadLength` bytes
///    - transceiverPayloadLength - 2 bytes
///    - transceiverPayload - `transceiverPayloadLength` bytes
///
/// <https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L97-L119>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransceiverMessage {
    #[prost(bytes = "vec", tag = "1")]
    pub source_manager_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub recipient_manager_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub manager_payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub transceiver_payload: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for TransceiverMessage {
    const NAME: &'static str = "TransceiverMessage";
    const PACKAGE: &'static str = "noble.dollar.portal.ntt.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "noble.dollar.portal.ntt.v1.TransceiverMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/noble.dollar.portal.ntt.v1.TransceiverMessage".into()
    }
}
include!("noble.dollar.portal.ntt.v1.serde.rs");
// @@protoc_insertion_point(module)
