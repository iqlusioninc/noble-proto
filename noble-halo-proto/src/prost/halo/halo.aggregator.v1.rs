// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundData {
    #[prost(string, tag = "1")]
    pub answer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub balance: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub interest: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub supply: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub updated_at: i64,
}
impl ::prost::Name for RoundData {
    const NAME: &'static str = "RoundData";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.RoundData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.RoundData".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceReported {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
    #[prost(string, tag = "2")]
    pub balance: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub interest: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub price: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub updated_at: i64,
}
impl ::prost::Name for BalanceReported {
    const NAME: &'static str = "BalanceReported";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.BalanceReported".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.BalanceReported".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NextPriceReported {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
}
impl ::prost::Name for NextPriceReported {
    const NAME: &'static str = "NextPriceReported";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.NextPriceReported".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.NextPriceReported".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnershipTransferred {
    #[prost(string, tag = "1")]
    pub previous_owner: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for OwnershipTransferred {
    const NAME: &'static str = "OwnershipTransferred";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.OwnershipTransferred".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.OwnershipTransferred".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub last_round_id: u64,
    #[prost(string, tag = "3")]
    pub next_price: ::prost::alloc::string::String,
    #[prost(map = "uint64, message", tag = "4")]
    pub rounds: ::std::collections::HashMap<u64, RoundData>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.GenesisState".into()
    }
}
//

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryOwner {}
impl ::prost::Name for QueryOwner {
    const NAME: &'static str = "QueryOwner";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryOwner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOwnerResponse {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryOwnerResponse {
    const NAME: &'static str = "QueryOwnerResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryNextPrice {}
impl ::prost::Name for QueryNextPrice {
    const NAME: &'static str = "QueryNextPrice";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryNextPrice".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryNextPrice".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNextPriceResponse {
    #[prost(string, tag = "1")]
    pub next_price: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryNextPriceResponse {
    const NAME: &'static str = "QueryNextPriceResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryNextPriceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryNextPriceResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryRoundData {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
}
impl ::prost::Name for QueryRoundData {
    const NAME: &'static str = "QueryRoundData";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryRoundData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryRoundData".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLatestRoundData {}
impl ::prost::Name for QueryLatestRoundData {
    const NAME: &'static str = "QueryLatestRoundData";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryLatestRoundData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryLatestRoundData".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRoundDataResponse {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
    #[prost(string, tag = "2")]
    pub answer: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub started_at: i64,
    #[prost(int64, tag = "4")]
    pub updated_at: i64,
    #[prost(uint64, tag = "5")]
    pub answered_in_round: u64,
}
impl ::prost::Name for QueryRoundDataResponse {
    const NAME: &'static str = "QueryRoundDataResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryRoundDataResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryRoundDataResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryRoundDetails {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
}
impl ::prost::Name for QueryRoundDetails {
    const NAME: &'static str = "QueryRoundDetails";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryRoundDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryRoundDetails".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLatestRoundDetails {}
impl ::prost::Name for QueryLatestRoundDetails {
    const NAME: &'static str = "QueryLatestRoundDetails";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryLatestRoundDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryLatestRoundDetails".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRoundDetailsResponse {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
    #[prost(string, tag = "2")]
    pub balance: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub interest: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub total_supply: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub updated_at: i64,
}
impl ::prost::Name for QueryRoundDetailsResponse {
    const NAME: &'static str = "QueryRoundDetailsResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.QueryRoundDetailsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.QueryRoundDetailsResponse".into()
    }
}
/// MsgReportBalance implements the reportBalance (0x0b50ece9) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgReportBalance {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub principal: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub interest: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub total_supply: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub next_price: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgReportBalance {
    const NAME: &'static str = "MsgReportBalance";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgReportBalance".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgReportBalance".into()
    }
}
/// MsgReportBalanceResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgReportBalanceResponse {
    #[prost(uint64, tag = "1")]
    pub round_id: u64,
}
impl ::prost::Name for MsgReportBalanceResponse {
    const NAME: &'static str = "MsgReportBalanceResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgReportBalanceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgReportBalanceResponse".into()
    }
}
/// MsgSetNextPrice implements the setNextPrice (0xfeca6988) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetNextPrice {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub next_price: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgSetNextPrice {
    const NAME: &'static str = "MsgSetNextPrice";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgSetNextPrice".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgSetNextPrice".into()
    }
}
/// MsgSetNextPriceResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetNextPriceResponse {}
impl ::prost::Name for MsgSetNextPriceResponse {
    const NAME: &'static str = "MsgSetNextPriceResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgSetNextPriceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgSetNextPriceResponse".into()
    }
}
/// MsgTransferOwnership implements the transferOwnership (0xf2fde38b) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnership {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgTransferOwnership {
    const NAME: &'static str = "MsgTransferOwnership";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgTransferOwnership".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgTransferOwnership".into()
    }
}
/// MsgTransferOwnershipResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnershipResponse {}
impl ::prost::Name for MsgTransferOwnershipResponse {
    const NAME: &'static str = "MsgTransferOwnershipResponse";
    const PACKAGE: &'static str = "halo.aggregator.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.aggregator.v1.MsgTransferOwnershipResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.aggregator.v1.MsgTransferOwnershipResponse".into()
    }
}
include!("halo.aggregator.v1.serde.rs");
include!("halo.aggregator.v1.tonic.rs");
// @@protoc_insertion_point(module)
