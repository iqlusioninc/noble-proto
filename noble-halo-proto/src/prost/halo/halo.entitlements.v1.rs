// @generated
// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Role {
    Unspecified = 0,
    DomesticFeeder = 1,
    InternationalFeeder = 2,
    DomesticSdyf = 3,
    InternationalSdyf = 4,
    FundAdmin = 5,
    LiquidityProvider = 6,
}
impl Role {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Role::Unspecified => "ROLE_UNSPECIFIED",
            Role::DomesticFeeder => "ROLE_DOMESTIC_FEEDER",
            Role::InternationalFeeder => "ROLE_INTERNATIONAL_FEEDER",
            Role::DomesticSdyf => "ROLE_DOMESTIC_SDYF",
            Role::InternationalSdyf => "ROLE_INTERNATIONAL_SDYF",
            Role::FundAdmin => "ROLE_FUND_ADMIN",
            Role::LiquidityProvider => "ROLE_LIQUIDITY_PROVIDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROLE_UNSPECIFIED" => Some(Self::Unspecified),
            "ROLE_DOMESTIC_FEEDER" => Some(Self::DomesticFeeder),
            "ROLE_INTERNATIONAL_FEEDER" => Some(Self::InternationalFeeder),
            "ROLE_DOMESTIC_SDYF" => Some(Self::DomesticSdyf),
            "ROLE_INTERNATIONAL_SDYF" => Some(Self::InternationalSdyf),
            "ROLE_FUND_ADMIN" => Some(Self::FundAdmin),
            "ROLE_LIQUIDITY_PROVIDER" => Some(Self::LiquidityProvider),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicCapabilityUpdated {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub enabled: bool,
}
impl ::prost::Name for PublicCapabilityUpdated {
    const NAME: &'static str = "PublicCapabilityUpdated";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.PublicCapabilityUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.PublicCapabilityUpdated".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleCapabilityUpdated {
    #[prost(enumeration = "Role", tag = "1")]
    pub role: i32,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
}
impl ::prost::Name for RoleCapabilityUpdated {
    const NAME: &'static str = "RoleCapabilityUpdated";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.RoleCapabilityUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.RoleCapabilityUpdated".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRoleUpdated {
    #[prost(string, tag = "1")]
    pub user: ::prost::alloc::string::String,
    #[prost(enumeration = "Role", tag = "2")]
    pub role: i32,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
}
impl ::prost::Name for UserRoleUpdated {
    const NAME: &'static str = "UserRoleUpdated";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.UserRoleUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.UserRoleUpdated".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Paused {
    #[prost(string, tag = "1")]
    pub account: ::prost::alloc::string::String,
}
impl ::prost::Name for Paused {
    const NAME: &'static str = "Paused";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.Paused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.Paused".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Unpaused {
    #[prost(string, tag = "1")]
    pub account: ::prost::alloc::string::String,
}
impl ::prost::Name for Unpaused {
    const NAME: &'static str = "Unpaused";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.Unpaused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.Unpaused".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnershipTransferred {
    #[prost(string, tag = "1")]
    pub previous_owner: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for OwnershipTransferred {
    const NAME: &'static str = "OwnershipTransferred";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.OwnershipTransferred".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.OwnershipTransferred".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub paused: bool,
    #[prost(map = "string, bool", tag = "3")]
    pub public_capabilities: ::std::collections::HashMap<::prost::alloc::string::String, bool>,
    #[prost(message, repeated, tag = "4")]
    pub role_capabilities: ::prost::alloc::vec::Vec<RoleCapability>,
    #[prost(message, repeated, tag = "5")]
    pub user_roles: ::prost::alloc::vec::Vec<UserRole>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.GenesisState".into()
    }
}
//

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleCapability {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
    #[prost(enumeration = "Role", tag = "2")]
    pub role: i32,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
}
impl ::prost::Name for RoleCapability {
    const NAME: &'static str = "RoleCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.RoleCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.RoleCapability".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRole {
    #[prost(string, tag = "1")]
    pub user: ::prost::alloc::string::String,
    #[prost(enumeration = "Role", tag = "2")]
    pub role: i32,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
}
impl ::prost::Name for UserRole {
    const NAME: &'static str = "UserRole";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.UserRole".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.UserRole".into()
    }
}
//

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryOwner {}
impl ::prost::Name for QueryOwner {
    const NAME: &'static str = "QueryOwner";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryOwner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOwnerResponse {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryOwnerResponse {
    const NAME: &'static str = "QueryOwnerResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryPaused {}
impl ::prost::Name for QueryPaused {
    const NAME: &'static str = "QueryPaused";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryPaused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryPaused".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryPausedResponse {
    #[prost(bool, tag = "1")]
    pub paused: bool,
}
impl ::prost::Name for QueryPausedResponse {
    const NAME: &'static str = "QueryPausedResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryPausedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryPausedResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPublicCapability {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryPublicCapability {
    const NAME: &'static str = "QueryPublicCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryPublicCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryPublicCapability".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryPublicCapabilityResponse {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
}
impl ::prost::Name for QueryPublicCapabilityResponse {
    const NAME: &'static str = "QueryPublicCapabilityResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryPublicCapabilityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryPublicCapabilityResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRoleCapability {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryRoleCapability {
    const NAME: &'static str = "QueryRoleCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryRoleCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryRoleCapability".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRoleCapabilityResponse {
    #[prost(enumeration = "Role", repeated, tag = "1")]
    pub roles: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for QueryRoleCapabilityResponse {
    const NAME: &'static str = "QueryRoleCapabilityResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryRoleCapabilityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryRoleCapabilityResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryUserCapability {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryUserCapability {
    const NAME: &'static str = "QueryUserCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryUserCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryUserCapability".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryUserCapabilityResponse {
    #[prost(enumeration = "Role", repeated, tag = "1")]
    pub roles: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for QueryUserCapabilityResponse {
    const NAME: &'static str = "QueryUserCapabilityResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.QueryUserCapabilityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.QueryUserCapabilityResponse".into()
    }
}
/// MsgSetPublicCapability implements the setPublicCapability (0xc6b0263e) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetPublicCapability {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
}
impl ::prost::Name for MsgSetPublicCapability {
    const NAME: &'static str = "MsgSetPublicCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetPublicCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetPublicCapability".into()
    }
}
/// MsgSetPublicCapabilityResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetPublicCapabilityResponse {}
impl ::prost::Name for MsgSetPublicCapabilityResponse {
    const NAME: &'static str = "MsgSetPublicCapabilityResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetPublicCapabilityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetPublicCapabilityResponse".into()
    }
}
/// MsgSetRoleCapability implements the setRoleCapability (0x7d40583d) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetRoleCapability {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(enumeration = "Role", tag = "2")]
    pub role: i32,
    #[prost(string, tag = "3")]
    pub method: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub enabled: bool,
}
impl ::prost::Name for MsgSetRoleCapability {
    const NAME: &'static str = "MsgSetRoleCapability";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetRoleCapability".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetRoleCapability".into()
    }
}
/// MsgSetRoleCapabilityResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetRoleCapabilityResponse {}
impl ::prost::Name for MsgSetRoleCapabilityResponse {
    const NAME: &'static str = "MsgSetRoleCapabilityResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetRoleCapabilityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetRoleCapabilityResponse".into()
    }
}
/// MsgSetUserRole implements the setUserRole (0x67aff484) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetUserRole {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(enumeration = "Role", tag = "3")]
    pub role: i32,
    #[prost(bool, tag = "4")]
    pub enabled: bool,
}
impl ::prost::Name for MsgSetUserRole {
    const NAME: &'static str = "MsgSetUserRole";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetUserRole".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetUserRole".into()
    }
}
/// MsgSetUserRoleResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetUserRoleResponse {}
impl ::prost::Name for MsgSetUserRoleResponse {
    const NAME: &'static str = "MsgSetUserRoleResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgSetUserRoleResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgSetUserRoleResponse".into()
    }
}
/// MsgPause implements the pause (0x8456cb59) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgPause {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgPause {
    const NAME: &'static str = "MsgPause";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgPause".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgPause".into()
    }
}
/// MsgPauseResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgPauseResponse {}
impl ::prost::Name for MsgPauseResponse {
    const NAME: &'static str = "MsgPauseResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgPauseResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgPauseResponse".into()
    }
}
/// MsgUnpause implements the unpause (0x3f4ba83a) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnpause {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUnpause {
    const NAME: &'static str = "MsgUnpause";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgUnpause".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgUnpause".into()
    }
}
/// MsgUnpauseResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUnpauseResponse {}
impl ::prost::Name for MsgUnpauseResponse {
    const NAME: &'static str = "MsgUnpauseResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgUnpauseResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgUnpauseResponse".into()
    }
}
/// MsgTransferOwnership implements the transferOwnership (0xf2fde38b) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnership {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgTransferOwnership {
    const NAME: &'static str = "MsgTransferOwnership";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgTransferOwnership".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgTransferOwnership".into()
    }
}
/// MsgTransferOwnershipResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnershipResponse {}
impl ::prost::Name for MsgTransferOwnershipResponse {
    const NAME: &'static str = "MsgTransferOwnershipResponse";
    const PACKAGE: &'static str = "halo.entitlements.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.entitlements.v1.MsgTransferOwnershipResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.entitlements.v1.MsgTransferOwnershipResponse".into()
    }
}
include!("halo.entitlements.v1.serde.rs");
include!("halo.entitlements.v1.tonic.rs");
// @@protoc_insertion_point(module)
