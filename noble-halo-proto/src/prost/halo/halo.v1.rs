// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deposit {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for Deposit {
    const NAME: &'static str = "Deposit";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.Deposit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.Deposit".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Withdrawal {
    #[prost(string, tag = "1")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for Withdrawal {
    const NAME: &'static str = "Withdrawal";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.Withdrawal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.Withdrawal".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnershipTransferred {
    #[prost(string, tag = "1")]
    pub previous_owner: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for OwnershipTransferred {
    const NAME: &'static str = "OwnershipTransferred";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.OwnershipTransferred".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.OwnershipTransferred".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// aggregator_state is the genesis state of the aggregator submodule.
    #[prost(message, optional, tag = "1")]
    pub aggregator_state: ::core::option::Option<super::aggregator::v1::GenesisState>,
    /// entitlements_state is the genesis state of the entitlements submodule.
    #[prost(message, optional, tag = "2")]
    pub entitlements_state: ::core::option::Option<super::entitlements::v1::GenesisState>,
    /// owner is the address that can control this module.
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    /// nonces contains the withdrawal nonce per user.
    #[prost(map = "string, uint64", tag = "4")]
    pub nonces: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.GenesisState".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawSignatureWrapper {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<WithdrawSignatureData>,
}
impl ::prost::Name for WithdrawSignatureWrapper {
    const NAME: &'static str = "WithdrawSignatureWrapper";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.WithdrawSignatureWrapper".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.WithdrawSignatureWrapper".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawSignatureData {
    #[prost(bytes = "vec", tag = "1")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub nonce: u64,
}
impl ::prost::Name for WithdrawSignatureData {
    const NAME: &'static str = "WithdrawSignatureData";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.WithdrawSignatureData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.WithdrawSignatureData".into()
    }
}
//

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryOwner {}
impl ::prost::Name for QueryOwner {
    const NAME: &'static str = "QueryOwner";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryOwner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryOwner".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOwnerResponse {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryOwnerResponse {
    const NAME: &'static str = "QueryOwnerResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryOwnerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryOwnerResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNonces {
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryNonces {
    const NAME: &'static str = "QueryNonces";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryNonces".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryNonces".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNoncesResponse {
    #[prost(map = "string, uint64", tag = "1")]
    pub nonces: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryNoncesResponse {
    const NAME: &'static str = "QueryNoncesResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryNoncesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryNoncesResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNonce {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryNonce {
    const NAME: &'static str = "QueryNonce";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryNonce".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryNonce".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryNonceResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
}
impl ::prost::Name for QueryNonceResponse {
    const NAME: &'static str = "QueryNonceResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.QueryNonceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.QueryNonceResponse".into()
    }
}
/// MsgDeposit implements the deposit (0xb6b55f25) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDeposit {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgDeposit {
    const NAME: &'static str = "MsgDeposit";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgDeposit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgDeposit".into()
    }
}
/// MsgDepositFor implements the depositFor (0x2f4f21e2) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositFor {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgDepositFor {
    const NAME: &'static str = "MsgDepositFor";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgDepositFor".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgDepositFor".into()
    }
}
/// MsgDepositResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositResponse {
    #[prost(string, tag = "1")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgDepositResponse {
    const NAME: &'static str = "MsgDepositResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgDepositResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgDepositResponse".into()
    }
}
/// MsgWithdraw implements the withdraw (0x5ebfdfc6) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdraw {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgWithdraw {
    const NAME: &'static str = "MsgWithdraw";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgWithdraw".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgWithdraw".into()
    }
}
/// MsgWithdrawTo implements the withdrawTo (0xc2930c45) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawTo {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgWithdrawTo {
    const NAME: &'static str = "MsgWithdrawTo";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgWithdrawTo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgWithdrawTo".into()
    }
}
/// MsgWithdrawToAdmin implements the withdrawToAdminOnly method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawToAdmin {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawToAdmin {
    const NAME: &'static str = "MsgWithdrawToAdmin";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgWithdrawToAdmin".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgWithdrawToAdmin".into()
    }
}
/// MsgWithdrawResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawResponse {
    #[prost(string, tag = "1")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawResponse {
    const NAME: &'static str = "MsgWithdrawResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgWithdrawResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgWithdrawResponse".into()
    }
}
/// MsgBurn implements the burn (0x42966c68) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBurn {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgBurn {
    const NAME: &'static str = "MsgBurn";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgBurn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgBurn".into()
    }
}
/// MsgBurnResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgBurnResponse {}
impl ::prost::Name for MsgBurnResponse {
    const NAME: &'static str = "MsgBurnResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgBurnResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgBurnResponse".into()
    }
}
/// MsgBurnFor implements the burnFor (0x1dd319cb) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBurnFor {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgBurnFor {
    const NAME: &'static str = "MsgBurnFor";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgBurnFor".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgBurnFor".into()
    }
}
/// MsgBurnForResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgBurnForResponse {}
impl ::prost::Name for MsgBurnForResponse {
    const NAME: &'static str = "MsgBurnForResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgBurnForResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgBurnForResponse".into()
    }
}
/// MsgMint implements the mint (0x40c10f19) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgMint {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgMint {
    const NAME: &'static str = "MsgMint";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgMint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgMint".into()
    }
}
/// MsgMintResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgMintResponse {}
impl ::prost::Name for MsgMintResponse {
    const NAME: &'static str = "MsgMintResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgMintResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgMintResponse".into()
    }
}
/// MsgTradeToFiat implements the tradeToFiat (0x4cdbb826) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTradeToFiat {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgTradeToFiat {
    const NAME: &'static str = "MsgTradeToFiat";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgTradeToFiat".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgTradeToFiat".into()
    }
}
/// MsgTradeToFiatResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTradeToFiatResponse {}
impl ::prost::Name for MsgTradeToFiatResponse {
    const NAME: &'static str = "MsgTradeToFiatResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgTradeToFiatResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgTradeToFiatResponse".into()
    }
}
/// MsgTransferOwnership implements the transferOwnership (0xf2fde38b) method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnership {
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgTransferOwnership {
    const NAME: &'static str = "MsgTransferOwnership";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgTransferOwnership".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgTransferOwnership".into()
    }
}
/// MsgTransferOwnershipResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTransferOwnershipResponse {}
impl ::prost::Name for MsgTransferOwnershipResponse {
    const NAME: &'static str = "MsgTransferOwnershipResponse";
    const PACKAGE: &'static str = "halo.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "halo.v1.MsgTransferOwnershipResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/halo.v1.MsgTransferOwnershipResponse".into()
    }
}
include!("halo.v1.serde.rs");
include!("halo.v1.tonic.rs");
// @@protoc_insertion_point(module)
